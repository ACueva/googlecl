#summary How to use the new APIs

= Introduction =

New, non-GData APIs have been made available as of revision 552! The usage is a bit different from the GData though, so this page is meant to introduce the new features.

A few things to note:
  * These features are currently in alpha. Some things may be a little buggy.
  * The interfaces are autogenerated. This means that new services can (and will) be added automatically, but it also means that it's more difficult to fine-tune them to be more user friendly. A new list of APIs may be downloaded using the command `refresh apis`
  * The new APIs have quotas. If you intend to use them heavily, it's advised that you get your own credentials.


= Setup =

1. Make sure that your version of GoogleCL is up to date (check out the latest version from the repository)

2. Follow the instructions on [http://code.google.com/p/google-api-python-client/wiki/Installation this page] to install the client that supports the new APIs.

3. Install GoogleCL.

= Usage =

The usage of the new APIs is, in general, similar to existing syntax. A few notes:

  * Instead of having services and tasks, the new APIs have services, resources, and methods.
  * Services and methods are pretty much the same as the existing services/tasks
  * Resources could be thought of a service within a service. For example, the Tasks service has two resources: one for managing the individual tasks, and one for managing the different tasklists.

Commands generally take the form
{{{$ google <service> <resource> <method> <parameters>}}}

Like before, GoogleCL will attempt to identify what your intent is. Doing so may not always be stable - as mentioned, the services are autogenerated, so it is possible that their usage will change, and some assists may no longer work. While this should be rare, it is still recommended that if stability is required, then the full command is used.

For example, a command to create a new shortened URL using Url Shortener could be:

{{{$ google urlshortener v1 url insert --body {"longUrl": "www.google.com"}}}}

Some of this may be trimmed down - for example, GoogleCL will use the newest version of the API by default. Additionally, UrlShortener only has one resource, url, so it is automatically selected. Finally, parameters can be inserted automatically into the `body` parameter. This shortens the command to:

{{{$ google urlshortener insert --longUrl www.google.com}}}

There are also a few other features, such as matching unmarked parameters, and prompting for missing commands may be turned on or off.

==The Help Function==

The `help` function works a bit differently for the new APIs. For one, it can provide much more specific information on different parts of the service. The most useful commands are probably the following:

{{{$ google help <service>}}} - Describes a service, lists resources

{{{$ google help <service> --verbose}}} - Lists all information regarding a service

{{{$ google help <service> <resource> <method>}}} - Lists information on a method

{{{$ google help <service> <resource> <method> --verbose}}} - Lists all the information regarding a method

{{{$ google help <service> <resource> <method> <parameter>}}} - Lists information regarding a parameter

{{{$ google help <service> schemas <schema>}}} - Lists information regarding a schema

==The Body Parameter and Schemas==

Some methods require a JSON request to be attached, which may be specified using the `body` parameter. Alternatively, it is possible for fields to be put into the body automatically. Information on a schema can be found using the {{{help <service> schemas <schema>}}} command mentioned above.

Two things of note:
  * It is not currently possible to know which fields an the schema are required or mutable for a method, unlike for the normal parameters
  * Nesting may be required for some schemas.

==The Fields Parameter==

The `fields` parameter is also used by the new APIs to submit partial requests. You may look at a method to identify its response schema, and look at that schema to determine which fields you want to see.
  * Having no fields specified returns the entire response
  * Nested fields may be specified with `<field>/<subfield>` or `<field>(<subfield1>,<subfield2>)`.

==Configuration Options and Defaults==

The config file may be edited using the command `edit config`. Once there, it is possible to edit GoogleCL's settings and defaults.

  * GData defaults may be edited as usual
  * The new APIs have their defaults stored by method instead of by service. The heading should be the method's ID.
  * For example, the ID of `urlshortener url insert` is `urlshortener.url.insert`. If you're uncertain, use `help ... --verbose`.

The following is a partial list of config settings:

  * prompt: (none, required, all) - sets what missing parameters are prompted for

  * editmode: (editor, cl) - editor -> if `body` is missing, launches editor, otherwise prompts on command line

  * formatting: (none, pprint, clean) - Determines which style of output is displayed. JSON is displayed by `none` and `pprint`, so consider using those if you intend to do scripting.

Additionally, if you intend to heavily use the new APIs and are concerned about the quota, it is recommended that you make use of the [https://code.google.com/apis/console/ API console] and enter the following fields:

  * client_id: (string)

  * client_secret: (string)

  * devkey2: (string)

==Authorization==

The new APIs make use of OAuth2. When you first use a new service, it will prompt you to authorize its usage. If you wish to revoke the credentials for some reason, it is possible to do so online. Alternatively, the local credentials may be deleted and reprompted for by using the `--force-auth` flag.


= Example Scripts =

Creating a new short URL

{{{$ google urlshortener insert --longUrl www.google.com}}}

{{{$ google urlshortener insert --body {"longUrl": "www.google.com"}}}}

Retrieving a shortened URL

{{{$ google urlshortener get --shortUrl http://goo.gl/ENYw5}}}

Getting a list of tasks

{{{$ google tasks tasks list --tasklist @default}}}

Creating a new task

{{{$ google tasks tasks insert @default --title "Test GoogleCL"}}}

{{{$ google tasks tasks insert @default --body {"title": "Test GoogleCL"}}}}

Posting something to Buzz

{{{$ google buzz activities insert --userId @me --title GoogleCL --object {"content": "Posting from GoogleCL!", "type": "note"}}}}

{{{$ google buzz activities insert --userId @me --body {"title": "GoogleCL", "object": {"content": "Posting from GoogleCL!", "type": "note"}}}}}

Translate something to another language

{{{$ google translate translations "Hello, world!" es}}}